<?php

namespace Plugin\Track;

class SecureFile extends \Ip\Internal\Grid\Model\Field
{

    protected $single = true;
    protected $root = 'file/secure';
    protected $tmpRoot = 'file/secure/tmp';
    protected $required = false;

    public function __construct($fieldFieldConfig, $wholeConfig)
    {
        parent::__construct($fieldFieldConfig, $wholeConfig);

        // Decides if we should store the filename(s) as a string
        // or array
        $this->single = !empty($fieldFieldConfig['single']) ? $fieldFieldConfig['single'] : false;

        $this->required = !empty($fieldFieldConfig['required']) ? $fieldFieldConfig['required'] : false;

        if (!empty($fieldFieldConfig['root'])) {
            $root = $fieldFieldConfig['root'];

            if (SecureFile::strEndsWith($root, '/')) {
                $root = substr($root, strlen($root) - 1, 0);
            }

            if (SecureFile::strStartsWith($root, '/')) {
                $root = substr($root, 1, strlen($root) - 1);
            }

            $this->root = $root;
        }
    }

    public function createData($postData)
    {
        if (!$postData) {
            return [];
        }

        $postData[$this->field] = $this->moveFile($postData[$this->field]);

        // Generated by \Ip\Form\Field\File
        unset($postData['securityToken']);
        unset($postData['antispam']);

        return [$this->field => $postData[$this->field]];
    }

    public function searchField($searchVariables)
    {
        $field = new \Ip\Form\Field\File([
            'label' => $this->label,
            'name' => $this->field,
            'required' => $this->required
        ]);

        if (!empty($searchVariables[$this->field])) {
            $field->setValue($searchVariables[$this->field]);
        }
        return $field;
    }

    /**
     * Generates the field for the create-form.
     */
    public function createField()
    {
        return new \Ip\Form\Field\File([
            'label' => $this->label,
            'name' => $this->field,
            'required' => $this->required
        ]);
    }

    /**
     * Generates the field for the update-form.
     * Is populated with the existing value
     * from the database
     */
    public function updateField($curData)
    {
        $field = new \Ip\Form\Field\File([
            'label' => $this->label,
            'name' => $this->field,
            'required' => $this->required,
            'value' => $curData[$this->field]
        ]);

        $field->setValue($curData[$this->field]);
        return $field;
    }

    public function updateData($postData)
    {
        $currFile = CourseModel::findVideo($postData['course_id']);
        $postData[$this->field] = $this->moveFile($postData[$this->field], $currFile);

        if ($currFile != $postData[$this->field]) {
            CourseModel::removeVideos($postData['course_id'], $this->root);
        }

        // Generated by \Ip\Form\Field\File
        unset($postData['securityToken']);
        unset($postData['antispam']);

        return [$this->field => $postData[$this->field]];
    }

    public function searchQuery($searchVariables)
    {
        // TODO: Implement searchQuery() method.
    }

    public function preview($recordData)
    {
        $data = json_decode($recordData[$this->field]);
        if (is_array($data)) {
            $data = implode(', ', $data);
        }
        return esc($data);
    }

    private function moveFile($field, $currFile = '')
    {
        if (empty($field)) { return ''; }

        $files = $field['file'];

        $mapped = array_map(function ($f) use ($currFile) {
            // Only remove tmp-file
            // if new file is equal to existing file
            if (!empty($currFile) && ($currFile == $f)) {
                if (file_exists(ipFile("$this->tmpRoot/${f}"))) {
                    unlink(ipFile("$this->tmpRoot/${f}"));
                }
                return $currFile;
            }

            if (file_exists(ipFile("$this->root/${f}"))) {
                // Remove temporary file
                if (file_exists(ipFile("$this->tmpRoot/${f}"))) {
                    unlink(ipFile("$this->tmpRoot/${f}"));
                }
                throw new \Exception("File already exists: ${f}");
            }

            copy(ipFile("$this->tmpRoot/${f}"), ipFile("$this->root/${f}"));
            unlink(ipFile("$this->tmpRoot/${f}"));
            return $f;
        }, $files);

        return !$this->single ? $mapped : $mapped[0];
    }

    /**
     * Helper-method for string
     */
    private static function strStartsWith($haystack, $needle)
    {
        $length = strlen($needle);
        return (substr($haystack, 0, $length) === $needle);
    }

    private static function strEndsWith($haystack, $needle)
    {
        $length = strlen($needle);
        if ($length == 0) {
            return true;
        }

        return (substr($haystack, -$length) === $needle);
    }

}